var bootswatchApp=angular.module("bootswatchApp",["ngRoute"]);bootswatchApp.config(["$routeProvider","$httpProvider",function(t,e){t.when("/main",{controller:"DashboardCtrl",templateUrl:"js/dashboard/dashboardView.html",requiresLogin:!0}).when("/login",{controller:"LoginCtrl",templateUrl:"js/login/loginView.html",pageTitle:"Login"}).otherwise({redirectTo:"/main"})}]),bootswatchApp.run(["$rootScope","$location","$window","bootswatchAuth",function(t,e,o,r){t.location=e,r.isLogin(),t.$on("$routeChangeStart",function(t,o,n){o.$$route&&o.$$route.requiresLogin&&(r.isAuthenticated||e.path("/login").search({}))})}]);var config={service_url:"http://localhost:3001",socketio_url:"http://localhost:2000"};angular.module("bootswatchApp").controller("DashboardCtrl",["$scope","$location","$window","$anchorScroll","bootswatchAuth","UserService",function(t,e,o,r,n,a){function s(t){t=t.replace(/×/g,"&times;").replace(/«/g,"&laquo;").replace(/»/g,"&raquo;").replace(/←/g,"&larr;").replace(/→/g,"&rarr;");var e=t.split(/\n/);e.shift(),e.splice(-1,1);var o=e[0].length-e[0].trim().length,r=new RegExp(" {"+o+"}");return e=e.map(function(t){return t.match(r)&&(t=t.substring(o)),t}),e=e.join("\n")}"default"!=n.getUser().theme&&$("#bootstrap_theme").attr("href","https://bootswatch.com/"+n.getUser().theme+"/bootstrap.min.css"),t.changeTheme=function(t){"default"!=t?$("#bootstrap_theme").attr("href","https://bootswatch.com/"+t+"/bootstrap.min.css"):$("#bootstrap_theme").attr("href","#");var e=n.getUser().username+","+n.getUser().password+","+t;a.updateTheme({data:e,username:n.getUser().username}).then(function(e){var o=n.getUser();o.theme=t,n.setUser(o)})},t["goto"]=function(t){e.hash(t),r()},t.logout=function(){n.isAuthenticated=!1,n.setLocalAuth(null),n.deleteUser(),e.path("/login").search({})};var i=$("<div id='source-button' class='btn btn-primary btn-xs'>&lt; &gt;</div>").click(function(){var t=$(this).parent().html();t=s(t),$("#source-modal pre").text(t),$("#source-modal").modal()});$('.bs-component [data-toggle="popover"]').popover(),$('.bs-component [data-toggle="tooltip"]').tooltip(),$(".bs-component").hover(function(){$(this).append(i),i.show()},function(){i.hide()})}]),angular.module("bootswatchApp").directive("a",function(){return{restrict:"E",link:function(t,e,o){(o.ngClick||""===o.href||"#"===o.href)&&e.on("click",function(t){t.preventDefault()})}}}),angular.module("bootswatchApp").controller("LoginCtrl",["$scope","$location","$window","bootswatchAuth","UserService",function(t,e,o,r,n){t.user={},t.currentPage=1,t.login=function(){var o=t.user.username,a=t.user.password;n.login({username:o,password:a}).success(function(t){r.isAuthenticated=!0,r.setLocalAuth(t),e.path("/main").search({})}).error(function(e,o){r.isAuthenticated=!1,t.authorizeFail=!0})}}]),angular.module("bootswatchApp").factory("bootswatchAuth",["$rootScope","$window",function(t,e){var o={},r={getUser:function(){return o},setLocalAuth:function(t){return t&&t.user?void r.setUser(t.user):void r.deleteUser()},setUser:function(t){return t?(o=t,void(e.localStorage.user=JSON.stringify(o))):void r.deleteUser()},isLogin:function(){e.localStorage.user?r.isAuthenticated||(r.isAuthenticated=!0,r.setUser(JSON.parse(e.localStorage.user))):r.setUser(null)},deleteUser:function(){delete e.localStorage.user,o={},r.isAuthenticated=!1},isAuthenticated:!1};return r}]),angular.module("bootswatchApp").factory("UserService",["$http",function(t){var e=config.service_url+"/user";return{login:function(o){var r=e+"/login";return t({method:"POST",url:r,data:o,headers:{"Content-type":"application/json"}})},updateTheme:function(o){var r=e+"/theme";return t({method:"PUT",url:r,data:o,headers:{"Content-type":"application/json"}})}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbmZpZy5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmRDdHJsLmpzIiwiZGlyZWN0aXZlL3V0aWwuanMiLCJsb2dpbi9sb2dpbkN0cmwuanMiLCJzZXJ2aWNlcy9zZXJ2aWNlLmF1dGguanMiLCJzZXJ2aWNlcy9zZXJ2aWNlLnVzZXIuanMiXSwibmFtZXMiOlsiYm9vdHN3YXRjaEFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCJ3aGVuIiwiY29udHJvbGxlciIsInRlbXBsYXRlVXJsIiwicmVxdWlyZXNMb2dpbiIsInBhZ2VUaXRsZSIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJydW4iLCIkcm9vdFNjb3BlIiwiJGxvY2F0aW9uIiwiJHdpbmRvdyIsImJvb3Rzd2F0Y2hBdXRoIiwibG9jYXRpb24iLCJpc0xvZ2luIiwiJG9uIiwiZXZlbnQiLCJuZXh0IiwiY3VycmVudCIsIiQkcm91dGUiLCJpc0F1dGhlbnRpY2F0ZWQiLCJwYXRoIiwic2VhcmNoIiwic2VydmljZV91cmwiLCJzb2NrZXRpb191cmwiLCIkc2NvcGUiLCIkYW5jaG9yU2Nyb2xsIiwiVXNlclNlcnZpY2UiLCJjbGVhblNvdXJjZSIsImh0bWwiLCJyZXBsYWNlIiwibGluZXMiLCJzcGxpdCIsInNoaWZ0Iiwic3BsaWNlIiwiaW5kZW50U2l6ZSIsImxlbmd0aCIsInRyaW0iLCJyZSIsIlJlZ0V4cCIsIm1hcCIsImxpbmUiLCJtYXRjaCIsInN1YnN0cmluZyIsImpvaW4iLCJnZXRVc2VyIiwidGhlbWUiLCIkIiwiYXR0ciIsImNoYW5nZVRoZW1lIiwibmFtZSIsImRhdGEiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidXBkYXRlVGhlbWUiLCJ0aGVuIiwicmVzdWx0IiwidXNlciIsInNldFVzZXIiLCJoYXNoIiwibG9nb3V0Iiwic2V0TG9jYWxBdXRoIiwiZGVsZXRlVXNlciIsIiRidXR0b24iLCJjbGljayIsInRoaXMiLCJwYXJlbnQiLCJ0ZXh0IiwibW9kYWwiLCJwb3BvdmVyIiwidG9vbHRpcCIsImhvdmVyIiwiYXBwZW5kIiwic2hvdyIsImhpZGUiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsZW0iLCJhdHRycyIsIm5nQ2xpY2siLCJocmVmIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50UGFnZSIsImxvZ2luIiwic3VjY2VzcyIsImVycm9yIiwic3RhdHVzIiwiYXV0aG9yaXplRmFpbCIsImZhY3RvcnkiLCJhVXNlciIsImxvY2FsU3RvcmFnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZSIsIiRodHRwIiwiYmFzZV91cmwiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwiQ29udGVudC10eXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxlQUFBQyxRQUFBQyxPQUFBLGlCQUNBLFdBRUFGLGVBQUFHLFFBQUEsaUJBQUEsZ0JBQ0EsU0FBQUMsRUFBQUMsR0FFQUQsRUFDQUUsS0FBQSxTQUNBQyxXQUFBLGdCQUNBQyxZQUFBLGtDQUNBQyxlQUFBLElBRUFILEtBQUEsVUFDQUMsV0FBQSxZQUNBQyxZQUFBLDBCQUNBRSxVQUFBLFVBRUFDLFdBQ0FDLFdBQUEsYUFJQVosY0FBQWEsS0FBQSxhQUFBLFlBQUEsVUFBQSxpQkFDQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxTQUFBSCxFQUNBRSxFQUFBRSxVQUVBTCxFQUFBTSxJQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0FELEVBQUFFLFNBQUFGLEVBQUFFLFFBQUFmLGdCQUNBUSxFQUFBUSxpQkFDQVYsRUFBQVcsS0FBQSxVQUFBQyxnQkM5QkEsSUFBQXhCLFNBQ0F5QixZQUFBLHdCQUNBQyxhQUFBLHdCQ0ZBNUIsU0FBQUMsT0FBQSxpQkFBQUssV0FBQSxpQkFDQSxTQUFBLFlBQUEsVUFBQSxnQkFBQSxpQkFBQSxjQUNBLFNBQUF1QixFQUFBZixFQUFBQyxFQUFBZSxFQUFB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aUMsUUFBQSxXQUNBLE1BQUFZLElBRUFJLGFBQUEsU0FBQVYsR0FDQSxNQUFBQSxJQUFBQSxFQUFBTSxTQUlBN0MsR0FBQThDLFFBQUFQLEVBQUFNLFVBSEE3QyxHQUFBa0QsY0FLQUosUUFBQSxTQUFBbUMsR0FDQSxNQUFBQSxJQUlBcEMsRUFBQW9DLE9BQ0FsRixFQUFBbUYsYUFBQXJDLEtBQUFzQyxLQUFBQyxVQUFBdkMsU0FKQTdDLEdBQUFrRCxjQU1BaEQsUUFBQSxXQUNBSCxFQUFBbUYsYUFBQXJDLEtBQ0E3QyxFQUFBUSxrQkFDQVIsRUFBQVEsaUJBQUEsRUFDQVIsRUFBQThDLFFBQUFxQyxLQUFBRSxNQUFBdEYsRUFBQW1GLGFBQUFyQyxRQUdBN0MsRUFBQThDLFFBQUEsT0FHQUksV0FBQSxpQkFDQW5ELEdBQUFtRixhQUFBckMsS0FDQUEsS0FDQTdDLEVBQUFRLGlCQUFBLEdBRUFBLGlCQUFBLEVBR0EsT0FBQVIsTUN6Q0FoQixRQUFBQyxPQUFBLGlCQUNBK0YsUUFBQSxlQUFBLFFBQUEsU0FBQU0sR0FDQSxHQUFBQyxHQUFBckcsT0FBQXlCLFlBQUEsT0FDQSxRQUNBZ0UsTUFBQSxTQUFBcEMsR0FDQSxHQUFBaUQsR0FBQUQsRUFBQSxRQUNBLE9BQUFELElBQ0FHLE9BQUEsT0FDQUQsSUFBQUEsRUFDQWpELEtBQUFBLEVBQ0FtRCxTQUNBQyxlQUFBLHVCQUlBakQsWUFBQSxTQUFBSCxHQUNBLEdBQUFpRCxHQUFBRCxFQUFBLFFBQ0EsT0FBQUQsSUFDQUcsT0FBQSxNQUNBRCxJQUFBQSxFQUNBakQsS0FBQUEsRUFDQW1ELFNBQ0FDLGVBQUEiLCJmaWxlIjoiYm9vdHN3YXRjaC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYm9vdHN3YXRjaEFwcD1hbmd1bGFyLm1vZHVsZSgnYm9vdHN3YXRjaEFwcCcsXHJcbiAgWyduZ1JvdXRlJ1xyXG4gIF0pO1xyXG5ib290c3dhdGNoQXBwLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywnJGh0dHBQcm92aWRlcicsXHJcbiAgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIsICRodHRwUHJvdmlkZXIpIHtcclxuICBcclxuICAkcm91dGVQcm92aWRlci5cclxuICBcdCAgd2hlbignL21haW4nLHtcclxuICBcdCAgXHRjb250cm9sbGVyOiAnRGFzaGJvYXJkQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6J2pzL2Rhc2hib2FyZC9kYXNoYm9hcmRWaWV3Lmh0bWwnLFxyXG4gICAgICAgIHJlcXVpcmVzTG9naW46IHRydWVcclxuICAgICAgfSkuXHJcbiAgICAgIHdoZW4oICcvbG9naW4nLCB7XHJcbiAgICAgICAgY29udHJvbGxlcjonTG9naW5DdHJsJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL2xvZ2luL2xvZ2luVmlldy5odG1sJyxcclxuICAgICAgICBwYWdlVGl0bGU6ICdMb2dpbicsXHJcbiAgICAgIH0pLlxyXG4gICAgICBvdGhlcndpc2Uoe1xyXG4gICAgICAgIHJlZGlyZWN0VG86ICcvbWFpbidcclxuICAgICAgfSk7XHJcbn1dKTtcclxuXHJcbmJvb3Rzd2F0Y2hBcHAucnVuKFsnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCckd2luZG93JywnYm9vdHN3YXRjaEF1dGgnLFxyXG4gIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkbG9jYXRpb24sJHdpbmRvdyxib290c3dhdGNoQXV0aCkge1xyXG5cdCRyb290U2NvcGUubG9jYXRpb249JGxvY2F0aW9uO1xyXG4gIGJvb3Rzd2F0Y2hBdXRoLmlzTG9naW4oKTtcclxuXHJcblx0JHJvb3RTY29wZS4kb24oJyRyb3V0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24oZXZlbnQsIG5leHQsIGN1cnJlbnQpIHtcclxuICAgIGlmKCEhbmV4dC4kJHJvdXRlJiZuZXh0LiQkcm91dGUucmVxdWlyZXNMb2dpbil7XHJcbiAgICAgIGlmKCFib290c3dhdGNoQXV0aC5pc0F1dGhlbnRpY2F0ZWQpXHJcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpLnNlYXJjaCh7fSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1dKTtcclxuXHJcbiIsInZhciBjb25maWc9e1xyXG5cdHNlcnZpY2VfdXJsOidodHRwOi8vbG9jYWxob3N0OjMwMDEnLFxyXG5cdHNvY2tldGlvX3VybDonaHR0cDovL2xvY2FsaG9zdDoyMDAwJ1xyXG59OyIsImFuZ3VsYXIubW9kdWxlKCdib290c3dhdGNoQXBwJykuY29udHJvbGxlcignRGFzaGJvYXJkQ3RybCcsXHJcblx0Wyckc2NvcGUnLCckbG9jYXRpb24nLCckd2luZG93JywnJGFuY2hvclNjcm9sbCcsJ2Jvb3Rzd2F0Y2hBdXRoJywnVXNlclNlcnZpY2UnLFxyXG5cdGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sJHdpbmRvdywkYW5jaG9yU2Nyb2xsLGJvb3Rzd2F0Y2hBdXRoLFVzZXJTZXJ2aWNlKXtcclxuXHJcblx0aWYoYm9vdHN3YXRjaEF1dGguZ2V0VXNlcigpLnRoZW1lICE9IFwiZGVmYXVsdFwiKVxyXG5cdFx0JChcIiNib290c3RyYXBfdGhlbWVcIikuYXR0cihcImhyZWZcIixcImh0dHBzOi8vYm9vdHN3YXRjaC5jb20vXCIrYm9vdHN3YXRjaEF1dGguZ2V0VXNlcigpLnRoZW1lK1wiL2Jvb3RzdHJhcC5taW4uY3NzXCIgKTtcclxuXHJcblx0JHNjb3BlLmNoYW5nZVRoZW1lID0gZnVuY3Rpb24obmFtZSl7XHJcblx0XHRcdGlmKG5hbWUhPVwiZGVmYXVsdFwiKVxyXG5cdFx0ICAgIFx0JChcIiNib290c3RyYXBfdGhlbWVcIikuYXR0cihcImhyZWZcIixcImh0dHBzOi8vYm9vdHN3YXRjaC5jb20vXCIrbmFtZStcIi9ib290c3RyYXAubWluLmNzc1wiICk7XHJcblx0XHQgICAgZWxzZVxyXG5cdFx0ICAgIFx0JChcIiNib290c3RyYXBfdGhlbWVcIikuYXR0cihcImhyZWZcIixcIiNcIiApO1xyXG5cdFx0ICAgIHZhciBkYXRhID0gYm9vdHN3YXRjaEF1dGguZ2V0VXNlcigpLnVzZXJuYW1lK1wiLFwiK2Jvb3Rzd2F0Y2hBdXRoLmdldFVzZXIoKS5wYXNzd29yZCtcIixcIituYW1lO1xyXG5cdFx0ICAgIFVzZXJTZXJ2aWNlLnVwZGF0ZVRoZW1lKHtkYXRhOmRhdGEsdXNlcm5hbWU6Ym9vdHN3YXRjaEF1dGguZ2V0VXNlcigpLnVzZXJuYW1lfSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xyXG5cdFx0ICAgIFx0dmFyIHVzZXIgPSBib290c3dhdGNoQXV0aC5nZXRVc2VyKCk7XHJcblx0XHQgICAgXHR1c2VyLnRoZW1lID0gbmFtZTtcclxuXHRcdCAgICBcdGJvb3Rzd2F0Y2hBdXRoLnNldFVzZXIodXNlcik7XHJcblx0XHQgICAgfSk7XHJcblx0fTtcclxuXHJcblx0JHNjb3BlLmdvdG8gPSBmdW5jdGlvbihuYW1lKXtcclxuXHRcdCRsb2NhdGlvbi5oYXNoKG5hbWUpO1xyXG4gICAgICBcdCRhbmNob3JTY3JvbGwoKTtcclxuXHR9O1xyXG5cclxuXHQkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcclxuXHRcdGJvb3Rzd2F0Y2hBdXRoLmlzQXV0aGVudGljYXRlZCA9IGZhbHNlO1xyXG5cdFx0Ym9vdHN3YXRjaEF1dGguc2V0TG9jYWxBdXRoKG51bGwpO1xyXG5cdFx0Ym9vdHN3YXRjaEF1dGguZGVsZXRlVXNlcigpO1xyXG5cdFx0JGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpLnNlYXJjaCh7fSk7XHJcblx0fTtcclxuXHJcblx0dmFyICRidXR0b24gPSAkKFwiPGRpdiBpZD0nc291cmNlLWJ1dHRvbicgY2xhc3M9J2J0biBidG4tcHJpbWFyeSBidG4teHMnPiZsdDsgJmd0OzwvZGl2PlwiKS5jbGljayhmdW5jdGlvbigpe1xyXG5cdCAgICB2YXIgaHRtbCA9ICQodGhpcykucGFyZW50KCkuaHRtbCgpO1xyXG5cdCAgICBodG1sID0gY2xlYW5Tb3VyY2UoaHRtbCk7XHJcblx0ICAgICQoXCIjc291cmNlLW1vZGFsIHByZVwiKS50ZXh0KGh0bWwpO1xyXG5cdCAgICAkKFwiI3NvdXJjZS1tb2RhbFwiKS5tb2RhbCgpO1xyXG5cdCAgfSk7XHJcblxyXG5cdCAgJCgnLmJzLWNvbXBvbmVudCBbZGF0YS10b2dnbGU9XCJwb3BvdmVyXCJdJykucG9wb3ZlcigpO1xyXG5cdCAgJCgnLmJzLWNvbXBvbmVudCBbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykudG9vbHRpcCgpO1xyXG5cclxuXHQgICQoXCIuYnMtY29tcG9uZW50XCIpLmhvdmVyKGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgJCh0aGlzKS5hcHBlbmQoJGJ1dHRvbik7XHJcblx0ICAgICAgJGJ1dHRvbi5zaG93KCk7XHJcblxyXG5cdCAgfSwgZnVuY3Rpb24oKXtcclxuXHQgICAgJGJ1dHRvbi5oaWRlKCk7XHJcblx0ICB9KTtcclxuXHJcblx0ICBmdW5jdGlvbiBjbGVhblNvdXJjZShodG1sKSB7XHJcblx0ICBcdGh0bWwgPSBodG1sLnJlcGxhY2UoL8OXL2csIFwiJnRpbWVzO1wiKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZSgvwqsvZywgXCImbGFxdW87XCIpXHJcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKC/Cuy9nLCBcIiZyYXF1bztcIilcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoL+KGkC9nLCBcIiZsYXJyO1wiKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZSgv4oaSL2csIFwiJnJhcnI7XCIpO1xyXG4gICAgICAgICAgICAgICBcclxuXHQgICAgdmFyIGxpbmVzID0gaHRtbC5zcGxpdCgvXFxuLyk7XHJcblxyXG5cdCAgICBsaW5lcy5zaGlmdCgpO1xyXG5cdCAgICBsaW5lcy5zcGxpY2UoLTEsIDEpO1xyXG5cclxuXHQgICAgdmFyIGluZGVudFNpemUgPSBsaW5lc1swXS5sZW5ndGggLSBsaW5lc1swXS50cmltKCkubGVuZ3RoLFxyXG5cdCAgICAgICAgcmUgPSBuZXcgUmVnRXhwKFwiIHtcIiArIGluZGVudFNpemUgKyBcIn1cIik7XHJcblxyXG5cdCAgICBsaW5lcyA9IGxpbmVzLm1hcChmdW5jdGlvbihsaW5lKXtcclxuXHQgICAgICBpZiAobGluZS5tYXRjaChyZSkpIHtcclxuXHQgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyhpbmRlbnRTaXplKTtcclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIHJldHVybiBsaW5lO1xyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIGxpbmVzID0gbGluZXMuam9pbihcIlxcblwiKTtcclxuXHJcblx0ICAgIHJldHVybiBsaW5lcztcclxuXHQgIH1cclxuXHJcblxyXG5cclxufV0pO1xyXG5cclxuXHJcblxyXG5cdCIsImFuZ3VsYXIubW9kdWxlKCdib290c3dhdGNoQXBwJykuZGlyZWN0aXZlKCdhJywgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIGlmKGF0dHJzLm5nQ2xpY2sgfHwgYXR0cnMuaHJlZiA9PT0gJycgfHwgYXR0cnMuaHJlZiA9PT0gJyMnKXtcclxuICAgICAgICAgICAgICAgIGVsZW0ub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYm9vdHN3YXRjaEFwcCcpLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsXHJcblx0Wyckc2NvcGUnLCckbG9jYXRpb24nLCckd2luZG93JywnYm9vdHN3YXRjaEF1dGgnLCdVc2VyU2VydmljZScsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbiwkd2luZG93LGJvb3Rzd2F0Y2hBdXRoLFVzZXJTZXJ2aWNlKXtcclxuXHQkc2NvcGUudXNlcj17fTtcclxuXHJcblx0JHNjb3BlLmN1cnJlbnRQYWdlID0gMTtcclxuXHJcblx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKXtcclxuXHRcdHZhciB1c2VybmFtZSA9ICRzY29wZS51c2VyLnVzZXJuYW1lO1xyXG4gICAgICAgIHZhciBwYXNzd29yZCA9ICRzY29wZS51c2VyLnBhc3N3b3JkO1xyXG5cdCAgICBVc2VyU2VydmljZS5sb2dpbih7XCJ1c2VybmFtZVwiOnVzZXJuYW1lLFwicGFzc3dvcmRcIjpwYXNzd29yZH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XHJcblx0ICAgICAgXHRcdGJvb3Rzd2F0Y2hBdXRoLmlzQXV0aGVudGljYXRlZCA9IHRydWU7XHJcblx0ICAgICAgXHRcdGJvb3Rzd2F0Y2hBdXRoLnNldExvY2FsQXV0aChkYXRhKTtcclxuXHQgICAgICBcdFx0JGxvY2F0aW9uLnBhdGgoJy9tYWluJykuc2VhcmNoKHt9KTtcclxuXHQgICAgICBcdH0pLmVycm9yKGZ1bmN0aW9uKHN0YXR1cywgZGF0YSkge1xyXG5cdCAgICAgIFx0XHRib290c3dhdGNoQXV0aC5pc0F1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcclxuXHQgICAgICBcdFx0JHNjb3BlLmF1dGhvcml6ZUZhaWwgPSB0cnVlO1xyXG5cdCAgICB9KTtcclxuXHRcdFxyXG5cdFx0XHJcblx0fTtcclxuXHJcbn1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYm9vdHN3YXRjaEFwcCcpXHJcbiAgICAuZmFjdG9yeSgnYm9vdHN3YXRjaEF1dGgnLFsnJHJvb3RTY29wZScsJyR3aW5kb3cnLFxyXG4gICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsJHdpbmRvdyl7XHJcbiAgICBcdHZhciB1c2VyPXt9O1xyXG4gICAgICAgIHZhciBib290c3dhdGNoQXV0aD17XHJcbiAgICAgICAgICAgIGdldFVzZXI6ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRMb2NhbEF1dGg6ZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBpZighZGF0YXx8IWRhdGEudXNlcil7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9vdHN3YXRjaEF1dGguZGVsZXRlVXNlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJvb3Rzd2F0Y2hBdXRoLnNldFVzZXIoZGF0YS51c2VyKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0VXNlcjpmdW5jdGlvbihhVXNlcil7XHJcbiAgICAgICAgICAgICAgICBpZighYVVzZXIpeyBcclxuICAgICAgICAgICAgICAgICAgICBib290c3dhdGNoQXV0aC5kZWxldGVVc2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXNlcj1hVXNlcjtcclxuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIgPSBKU09OLnN0cmluZ2lmeSh1c2VyKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNMb2dpbjpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgaWYgKCR3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFib290c3dhdGNoQXV0aC5pc0F1dGhlbnRpY2F0ZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib290c3dhdGNoQXV0aC5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib290c3dhdGNoQXV0aC5zZXRVc2VyKEpTT04ucGFyc2UoJHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGJvb3Rzd2F0Y2hBdXRoLnNldFVzZXIobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlbGV0ZVVzZXI6ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSAkd2luZG93LmxvY2FsU3RvcmFnZS51c2VyOyBcclxuICAgICAgICAgICAgICAgIHVzZXIgPSB7fTtcclxuICAgICAgICAgICAgICAgIGJvb3Rzd2F0Y2hBdXRoLmlzQXV0aGVudGljYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LCAgICAgICAgIFxyXG4gICAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxyXG5cclxuICAgICAgICB9O1xyXG4gICAgXHRyZXR1cm4gYm9vdHN3YXRjaEF1dGg7XHJcbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Jvb3Rzd2F0Y2hBcHAnKVxyXG4gICAgLmZhY3RvcnkoJ1VzZXJTZXJ2aWNlJyxbJyRodHRwJyxmdW5jdGlvbigkaHR0cCl7XHJcbiAgICBcdHZhciBiYXNlX3VybD1jb25maWcuc2VydmljZV91cmwrJy91c2VyJztcclxuICAgIFx0cmV0dXJuIHtcclxuICAgICAgICAgICAgbG9naW46ZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXJsPWJhc2VfdXJsK1wiL2xvZ2luXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDonUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOnVybCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczp7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGRhdGVUaGVtZTpmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgIHZhciB1cmw9YmFzZV91cmwrJy90aGVtZSc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDonUFVUJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6dXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6ZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOntcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7ICAgIFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXHJcblxyXG4gICAgXHR9O1xyXG4gICAgfV0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
